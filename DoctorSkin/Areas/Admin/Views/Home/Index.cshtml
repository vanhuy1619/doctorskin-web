
@{
    ViewBag.Title = "Trang chủ";
    Layout = "~/Areas/Admin/Views/Shared/AdminLayout.cshtml";
}

<div class="overview-boxes">
    @*{{!-- đặt phòng --}}*@
    <div class="box">
        <div class="right-side">
            <div class="box-topic">Đơn hàng hôm nay</div>
            <div class="number">@ViewBag.bills.Count</div>
            @{
                if (ViewBag.compareToday == true)
                {
                    <div class="indicator">
                        <i class='bx bx-up-arrow-alt'></i>
                        <span class="text">Up from yesterday</span>
                    </div>
                }

                else
                {
                    <div class="indicator">
                        <i class='bx bx-minus-circle'></i>
                        <span class="text">No change from yesterday</span>
                    </div>
                }
            }
        </div>
        <i class='bx bx-cart-alt cart'></i>
    </div>
    @*{{!-- doanh thu --}}*@
    <div class="box">
        <div class="right-side">
            <div class="box-topic">Doanh thu</div>
            <div class="number">@ViewBag.revenue</div>
            @{
                if (ViewBag.compareRevenueMonth == true)
                {
                    <div class="indicator">
                        <i class='bx bx-up-arrow-alt'></i>
                        <span class="text">Up from Month ago</span>
                    </div>
                }
                else
                {
                    <div class="indicator">
                        <i class='bx bx-down-arrow-alt down'></i>
                        <span class="text">Down From yesterday</span>
                    </div>
                }
            }
        </div>
        <i class='bx bxs-cart-add cart two'></i>
    </div>
    @*{{!-- khách hàng mới --}}*@
    <div class="box">
        <div class="right-side">
            <div class="box-topic">Khách hàng mới</div>
            <div class="number">@ViewBag.newCustomer2Month.Count</div>
            @{
                if (ViewBag.compareCunstomer == true)
                {
                    <div class="indicator">
                        <i class='bx bx-up-arrow-alt'></i>
                        <span class="text">Up from the customer</span>
                    </div>
                }
                else
                {
                    <div class="indicator">
                        <i class='bx bx-down-arrow-alt'></i>
                        <span class="text">Down from the customer</span>
                    </div>
                }
            }
        </div>
        <i class='bx bx-cart cart three'></i>
    </div>
    @*{{!-- hài lòng --}}*@
    <div class="box">
        <div class="right-side">
            <div class="box-topic">Mức độ hài lòng</div>
            <div class="number">
                @ViewBag.starAve <span class="mx-1" style="font-size:2rem; color:gold">★</span>
            </div>
        </div>
        <i class='bx bxs-cart-download cart four'></i>
    </div>
</div>

<div class="sales-boxes">
    <div class="recent-sales box">
        <div class="title">THỐNG KÊ DOANH THU</div>
        <div class="sales-details">
            <div id="chart" style="width:100%"></div>
        </div>
        <div class="button">
            <a href="#">See All</a>
        </div>
    </div>

    <div class="top-sales box" style="height:520px;overflow:auto">
        <div class="title">Dịch vụ và sản phẩm bán chạy</div>
        <ul class="top-sales-details" id="TopService">
            @foreach (var i in ViewBag.topServices)
            {
                <li>
                    <div style="display:flex;align-items:center">
                        <div>
                            <img style="width:90px;object-fit:contain; border-radius:8px" src="@i.img_sd" />
                        </div>
                        <div style="margin-left:8px">
                            <span>@i.name_sd</span>
                        </div>
                    </div>
                </li>
            }
            @foreach (var i in ViewBag.topProducts)
            {
                <li>
                    <div style="display:flex;align-items:center">
                        <div>
                            <img style="width:90px;object-fit:contain; border-radius:8px" src="@i.img" />
                        </div>
                        <div style="margin-left:8px">
                            <span>@i.namep</span>
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>
</div>

<div class="sales-boxes" style="margin-top: 20px">
    <div class="recent-sales box">
        <div class="title">THỐNG KÊ SỐ SẢN PHẨM BÁN RA</div>
        <div class="sales-details">
            <div id="chart2" style="width:100%"></div>
        </div>
        <div class="button">
            <a href="#">See All</a>
        </div>

        <div class="title mt-5">THỐNG KÊ LƯỢNG PHẢN HỒI TỪ KHÁCH HÀNG</div>
        <div class="sales-details">
            <div id="chart3" style="width:100%"></div>
        </div>
        <div class="button">
            <a href="#">See All</a>
        </div>
    </div>

    <div class="top-sales box ">
        <div class="title">
            Tin nhắn của khách hàng
            <div>
                <div class="uil-bell" id="bell">
                    <div id="num-bell">{{questionsLength}}</div>
                </div>
            </div>
        </div>
        <div class="top-sales-details messages-section">
            <div class="message" style="padding-top: 20px">
                {{#each questions}}
                <div class="message-box" id="ms-{{this._id}}">
                    <img src="{{this.imgUser}}" alt="profile image">
                    <div class="message-content">
                        <div class="message-header">
                            <div class="name">{{this.nameUser}}</div>
                            <div class="star-checkbox" style="display: flex;align-items: center">
                                <input type="checkbox" id="star-1">
                                <i id="" class="uil-trash-alt" style="font-size: 20px;color: red;cursor:pointer" onclick="handleDelete('{{this._id}}')"></i>
                                <button class="buttonrep btn btn-success ml-2" style="padding: 2px !important;" data-toggle="modal" data-target="#exampleModal" data-value="{{this._id}}">Rep</button>

                                <label for="star-1" style="margin-left: 4px;margin-bottom: 0px !important;">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-star">
                                        <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
                                    </svg>
                                </label>
                            </div>
                        </div>
                        <p class="message-line" id="contentquestion-{{this._id}}">
                            {{this.question}}
                        </p>
                        <p class="message-line time">
                            {{this.datesendString}}
                        </p>
                    </div>
                </div>
                {{/each}}
            </div>
        </div>
    </div>
</div>

<!-- Modal Rep ib-->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Trả lời</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="answer">Câu trả lời</label>
                    <textarea class="form-control" id="answer" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
                <button id="repSubmit" data-dismiss="modal" type="button" class="btn btn-primary">Gửi</button>
            </div>
        </div>
    </div>
</div>

{{!-- handler modal rep message --}}
<script>
    document.getElementById('item-home').classList.add("active")

  let data = {}
  $(".buttonrep").on("click", function (e) {
    const id = $(this).data("value");
    data.id = id;
  });
  $("#repSubmit").on("click", function (e) {
    e.preventDefault();
    data.repquestion =$("#answer").val();
    const currentPath = window.location.pathname;
    $.ajax({
      type: "POST",
      url: currentPath+'rep',
      data: data,
      success: function (response){
        Swal.fire({
          title: 'Trả lời thành công',
          text: 'Đã trả lời',
          icon: 'success',
          confirmButtonText: 'OK'
        }).then((result) => {
          if (result.isConfirmed) {
            $(`#ms-${data.id}`).remove();
            const length = parseInt($("#num-bell").text());
            const newLength = length - 1;
            $("#num-bell").text(newLength);
          }
        });


      },
      error: function(xhr, textStatus, errorThrown) {
        console.log(textStatus,errorThrown);
      }
    })
  })
</script>
@*{{!-- delete message --}}*@
<script>
 function handleDelete(uid)
  {

    swal({
      title: "Xác nhận xóa!",
      text: "Câu hỏi này sẽ bị xóa",
      icon: "warning",
      buttons: true,
      dangerMode: false,
    }).then((value) => {
      if (value) {
        const currentPath = window.location.pathname;
        console.log("đã xác nhận")
        $.ajax({
          type: "Post",
          url: currentPath+"deleteQuestion",
          data: {
            id: uid,
          },
          success: function (response)
          {
            swal({
              position: 'top-end',
              icon: 'success',
              title: "Xóa thành công",
              showConfirmButton: false,
              timer: 1000
            }).then(()=>{
              $('#ms-'+uid).remove()
              const value = parseInt($("#num-bell").text())-1
              $("#num-bell").text(value)
            })
          },
          error:function ()
          {
            console.log("lỗi")
          }
        });
      }
    });
  }
</script>

<!-- apexcharts js -->
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.19.1/moment.min.js" integrity="sha512-Dz4zO7p6MrF+VcOD6PUbA08hK1rv0hDv/wGuxSUjImaUYxRyK2gLC6eQWVqyDN9IM1X/kUA8zkykJS/gEVOd3w==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script>
    // databooking and datebooking
    const billsAll = @Html.Raw(Json.Encode(ViewBag.billsAll));

    const filteredbillsAll = billsAll.filter(e => e.status == "Thành công");
    const databillsAll = filteredbillsAll.map(e => e.totalbill);
    console.log(databillsAll)

    const datebillsAll = filteredbillsAll.map(e => {

        const timestamp = e.datebuy.match(/\d+/)[0];
        return parseInt(timestamp, 10);
    });

    const service = @Html.Raw(Json.Encode(ViewBag.service));
    const dataServices = service.map(ele => {
        return ele.amount*ele.price_sd
        });
    console.log(dataServices)


        var options = {
            series: [{
                name: 'DOANH THU',
                type: 'column',
                data: databillsAll
            }, {
                name: 'DỊCH VỤ',
                type: 'area',
                data: dataServices
            }, {
                name: 'KHÁC',
                type: 'line',
                data: [25000000, 20000000, 31000000]
            }],
            chart: {
                height: 350,
                type: 'line',
                stacked: false,
            },
            stroke: {
                width: [0, 2, 5],
                curve: 'smooth'
            },
            plotOptions: {
                bar: {
                    columnWidth: '100%'
                }
            },

            fill: {
                opacity: [0.85, 0.25, 1],
                gradient: {
                    inverseColors: false,
                    shade: 'light',
                    type: "vertical",
                    opacityFrom: 0.85,
                    opacityTo: 0.55,
                    stops: [0, 100, 100, 100]
                }
            },
            labels: datebillsAll,
            markers: {
                size: 0
            },
            xaxis: {
                type: 'datetime'
            },
            yaxis: {
                title: {
                    text: 'Triệu(VND)',
                },
                min: 0
            },
            tooltip: {
                shared: true,
                intersect: false,
                y: {
                  formatter: function (y) {
                      if (typeof y !== "undefined" || y !=null) {
                          // Chuyển đổi giá trị số sang chuỗi tiền tệ VND
                          const formatter = new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' });
                          const vndValue = formatter.format(y);
                          return vndValue;
                      }
                      return 0 + " VND";
                  }
                }
            }
        };
        var chart = new ApexCharts(document.querySelector("#chart"), options);
        chart.render();

    //Loại sản phẩm
    const categories = @Html.Raw(Json.Encode(ViewBag.brands));

    // thống kê sản phẩm ở chart 2
    const products = @Html.Raw(Json.Encode(ViewBag.products));
    //console.log(products)
    const productbuy = {};
    for (let i = 0; i < products.length; i++)
    {
        //type sản phẩm
        const producttype = products[i].typep;
        
        let buycount = 0;
        if (producttype in productbuy)
        {
            buycount = productbuy[producttype]
        }
        for (let j = 0; j < billsAll.length; j++)
        {
            const booking = billsAll[j];
            if (booking.idp == products[i].idp)
            {
                buycount = buycount+booking.quantity;
            }
         }
        productbuy[producttype] = buycount;
    }

    var updatedObject = {};
    categories.forEach(function (obj) {
        var id = obj.typep;
        var value = productbuy[id];

        if (value !== undefined) {
            updatedObject[obj.namec] = value;
        }
    });

    console.log(updatedObject)

    const producttypes = Object.keys(updatedObject);
    const buycounts = Object.values(updatedObject);
        var options2 = {
            series: buycounts,
            chart: {
                width: 380,
                type: 'pie',
            },
            labels: producttypes,
            responsive: [{
                breakpoint: 480,
                options: {
                    chart: {
                        width: 200
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }]
        };
    var chart2 = new ApexCharts(document.querySelector("#chart2"), options2);
    chart2.render();

// thống kê feedback ở chart 3
        const feedbacks = @Html.Raw(Json.Encode(ViewBag.feedbacks))
        //console.log(feedbacks)

        // Tạo các đối tượng để lưu trữ dữ liệu theo sản phẩm và theo ngày đánh giá
        const roomData = {};
        const dateData = {};
        // Lặp qua từng phản hồi để lưu trữ dữ liệu theo sản phẩm và theo ngày đanh giá
        for (let i = 0; i < feedbacks.length; i++) {
          const feedback = feedbacks[i];
            const room = feedback.idp;

            var dateformat = new Date(parseInt(feedback.datefb.substr(6)));
            const date = dateformat.toISOString().substring(0, 16);

          // Lưu trữ dữ liệu theo phòng
            if (!roomData[room] && room != null)
            {
                roomData[room] = { name: `${room}`, data: [] };
            }

          roomData[room].data.push(feedback.starFb);

          // Lưu trữ dữ liệu theo ngày
            if (!dateData[date])
            {
            dateData[date] = { x: date, data: {} };
          }
            if (!dateData[date].data[room] && room != null)
            {
            dateData[date].data[room] = { name: `${room}`, data: [] };
          } 
          dateData[date].data[room].data.push(feedback.star);
        }
        // Tạo danh sách các ngày để sử dụng trong biểu đồ
        const dates = Object.keys(dateData).sort();
        // Tạo một mảng dữ liệu ApexCharts từ các dữ liệu về phòng đã thu thập được
        const roomSeries = Object.values(roomData);
        // Tạo một mảng dữ liệu ApexCharts từ các dữ liệu về ngày đã thu thập được
        const dateSeries = Object.entries(dateData).map(([date, data]) => ({
          x: date,
          ...Object.values(data.data),
        }));
        //console.log(roomSeries)
        //console.log(dateSeries)

          dateSeries.forEach((data, index)=>{
            const dataArrays = Object.values(data);
            //console.log(dataArrays)
          })

        for (let i = 0; i < roomSeries.length; i++){
          roomSeries[i].data = []
          const newData = []
          dateSeries.forEach((data, index)=>{
            const dataArrays = Object.values(data);
            for (let j = 0; j < dataArrays.length-1; j++){
              if (dataArrays[j].name == roomSeries[i].name){
                newData.push(dataArrays[j].data[0])
              } else if (dataArrays[j].name != roomSeries[i].name && j==dataArrays.length-2){
                newData.push(null)
              }
            }
          })
          roomSeries[i].data = newData
    }

    roomSeries.forEach(function (element1) {
        var matchingElement = products.find(function (element2) {
            return element2.idp == element1.name;
        });

        if (matchingElement) {
            element1.name = matchingElement.namep;
        }
    });

    console.log(roomSeries)

        // Cấu hình
        const options3 = {
          chart: {
            height: 350,
            type: "line",
          },
          stroke: {
            width: 2,
            curve: "smooth",
          },
            series: roomSeries,
          xaxis: {
            categories: dates,
          },
          yaxis: {
            title: {
              text: "Đánh giá (sao)",
            },
            min: 1,
            max: 5,
          },
          tooltip: {
            shared: true,
            intersect: false,
            y: {
              formatter: function (y) {
                if (typeof y !== "undefined") {
                  return y + " sao";
                }
                return 0 + " sao";
              },
            },
          },
          dataLabels: {
            enabled: true,
          },
          markers: {
            size: 5,
            strokeColors: '#fff',
            strokeWidth: 2,
          },
          legend: {
            offsetY: 7,
          },
          grid: {
            padding: {
              bottom: 20,
            },
          },
        };

        var chart3 = new ApexCharts(document.querySelector("#chart3"), options3);
        chart3.render();
</script>
