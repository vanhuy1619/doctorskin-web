<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Identity.Web.TokenAcquisition</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Identity.Web.ApplicationBuilderExtensions">
            <summary>
            Extension class on IApplicationBuilder to initialize the service provider of
            the TokenAcquirerFactory in ASP.NET Core.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.ApplicationBuilderExtensions.UseTokenAcquirerFactory(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Uses the token acquirer factory, therefore 
            </summary>
            <param name="applicationBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Identity.Web.HttpContextExtensions.StoreTokenUsedToCallWebAPI(Microsoft.AspNetCore.Http.HttpContext,Microsoft.IdentityModel.Tokens.SecurityToken)">
            <summary>
            Keep the validated token associated with the HTTP request.
            </summary>
            <param name="httpContext">HTTP context.</param>
            <param name="token">Token to preserve after the token is validated so that
            it can be used in the actions.</param>
        </member>
        <member name="M:Microsoft.Identity.Web.HttpContextExtensions.GetTokenUsedToCallWebAPI(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Get the parsed information about the token used to call the web API.
            </summary>
            <param name="httpContext">HTTP context associated with the current request.</param>
            <returns><see cref="T:Microsoft.IdentityModel.Tokens.SecurityToken"/> used to call the web API.</returns>
        </member>
        <member name="T:Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder">
            <summary>
            Authentication builder returned by the EnableTokenAcquisitionToCallDownstreamApi methods
            enabling you to decide token cache implementations.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddInMemoryTokenCaches(System.Action{Microsoft.Identity.Web.TokenCacheProviders.InMemory.MsalMemoryTokenCacheOptions},System.Action{Microsoft.Extensions.Caching.Memory.MemoryCacheOptions})">
            <summary>
            Add in memory token caches.
            </summary>
            <param name="configureOptions"><see cref="T:Microsoft.Identity.Web.TokenCacheProviders.InMemory.MsalMemoryTokenCacheOptions"/> to configure.</param>
            <param name="memoryCacheOptions"><see cref="T:Microsoft.Extensions.Caching.Memory.MemoryCacheOptions"/> to configure.</param>
            <returns>the service collection.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.MicrosoftIdentityAppCallsWebApiAuthenticationBuilder.AddDistributedTokenCaches">
            <summary>
            Add distributed token caches.
            </summary>
            <returns>the service collection.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisitionAspNetCore.#ctor(Microsoft.Identity.Web.TokenCacheProviders.IMsalTokenCacheProvider,System.Net.Http.IHttpClientFactory,Microsoft.Extensions.Logging.ILogger{Microsoft.Identity.Web.TokenAcquisition},Microsoft.Identity.Web.ITokenAcquisitionHost,System.IServiceProvider,Microsoft.Identity.Abstractions.ICredentialsLoader)">
            <summary>
            Constructor of the TokenAcquisition service. This requires the Azure AD Options to
            configure the confidential client application and a token cache provider.
            This constructor is called by ASP.NET Core dependency injection.
            </summary>
            <param name="tokenCacheProvider">The App token cache provider.</param>
            <param name="tokenAcquisitionHost">Host of the token acquisition service.</param>
            <param name="httpClientFactory">HTTP client factory.</param>
            <param name="logger">Logger.</param>
            <param name="serviceProvider">Service provider.</param>
            <param name="credentialsLoader">Credential loader service.</param>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisitionAspNetCore.ReplyForbiddenWithWwwAuthenticateHeaderAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.MsalUiRequiredException,Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Used in web APIs (no user interaction).
            Replies to the client through the HTTP response by sending a 403 (forbidden) and populating the 'WWW-Authenticate' header so that
            the client, in turn, can trigger a user interaction so that the user consents to more scopes.
            </summary>
            <param name="scopes">Scopes to consent to.</param>
            <param name="msalServiceException">The <see cref="T:Microsoft.Identity.Client.MsalUiRequiredException"/> that triggered the challenge.</param>
            <param name="httpResponse">The <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/> to update.</param>
            if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web API.
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisitionAspNetCore.ReplyForbiddenWithWwwAuthenticateHeader(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.MsalUiRequiredException,System.String,Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Used in web APIs (no user interaction).
            Replies to the client through the HTTP response by sending a 403 (forbidden) and populating the 'WWW-Authenticate' header so that
            the client, in turn, can trigger a user interaction so that the user consents to more scopes.
            </summary>
            <param name="scopes">Scopes to consent to.</param>
            <param name="msalServiceException">The <see cref="T:Microsoft.Identity.Client.MsalUiRequiredException"/> that triggered the challenge.</param>
            <param name="authenticationScheme">Authentication scheme. If null, will use OpenIdConnectDefault.AuthenticationScheme
            if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web API.</param>
            <param name="httpResponse">The <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/> to update.</param>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisitionAspNetCore.AddAccountToCacheFromAuthorizationCodeAsync(Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext,System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
             This handler is executed after the authorization code is received (once the user signs-in and consents) during the
             <a href='https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-auth-code-flow'>authorization code flow</a> in a web app.
             It uses the code to request an access token from the Microsoft identity platform and caches the tokens and an entry about the signed-in user's account in the MSAL's token cache.
             The access token (and refresh token) provided in the <see cref="T:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext"/>, once added to the cache, are then used to acquire more tokens using the
             <a href='https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow'>on-behalf-of flow</a> for the signed-in user's account,
             in order to call to downstream APIs.
             </summary>
             <param name="context">The context used when an 'AuthorizationCode' is received over the OpenIdConnect protocol.</param>
             <param name="scopes">scopes to request access to.</param>
             <param name="authenticationScheme">Authentication scheme to use (by default, OpenIdConnectDefaults.AuthenticationScheme).</param>
             <example>
             From the configuration of the Authentication of the ASP.NET Core web API:
             <code>OpenIdConnectOptions options;</code>
            
             Subscribe to the authorization code received event:
             <code>
              options.Events = new OpenIdConnectEvents();
              options.Events.OnAuthorizationCodeReceived = OnAuthorizationCodeReceived;
             }
             </code>
            
             And then in the OnAuthorizationCodeRecieved method, call <see cref="M:Microsoft.Identity.Web.TokenAcquisitionAspNetCore.AddAccountToCacheFromAuthorizationCodeAsync(Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext,System.Collections.Generic.IEnumerable{System.String},System.String)"/>:
             <code>
             private async Task OnAuthorizationCodeReceived(AuthorizationCodeReceivedContext context)
             {
               var tokenAcquisition = context.HttpContext.RequestServices.GetRequiredService&lt;ITokenAcquisition&gt;();
                await _tokenAcquisition.AddAccountToCacheFromAuthorizationCode(context, new string[] { "user.read" });
             }
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisitionAspNetCore.GetTokenAcquirer(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Identity.Abstractions.CredentialDescription},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisitionAspNetCore.GetTokenAcquirer(Microsoft.Identity.Abstractions.IdentityApplicationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisitionAspNetCore.GetTokenAcquirer(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Identity.Web.TokenAcquisitionAspnetCoreHost">
            <summary>
            Implementation of ITokenAcquisitionHost in the case of ASP.NET Core
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisitionAspnetCoreHost.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor,Microsoft.Identity.Web.IMergedOptionsStore,System.IServiceProvider)">
            <summary>
            Constructor of the TokenAcquisition service. This requires the Azure AD Options to
            configure the confidential client application and a token cache provider.
            This constructor is called by ASP.NET Core dependency injection.
            </summary>
            <param name="httpContextAccessor">Access to the HttpContext of the request.</param>
            <param name="mergedOptionsMonitor">Configuration options.</param>
            <param name="serviceProvider">Service provider.</param>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisitionAspnetCoreHost.GetEffectiveAuthenticationScheme(System.String)">
            <inheritdoc/>
        </member>
        <member name="F:Microsoft.Identity.Web.Util.Base64UrlHelpers.s_base64Table">
            <summary>
            Encoding table.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.Util.Base64UrlHelpers.Encode(System.String)">
            <summary>
            The following functions perform base64url encoding which differs from regular base64 encoding as follows
            * padding is skipped so the pad character '=' doesn't have to be percent encoded
            * the 62nd and 63rd regular base64 encoding characters ('+' and '/') are replace with ('-' and '_')
            The changes make the encoding alphabet file and URL safe.
            </summary>
            <param name="arg">string to encode.</param>
            <returns>Base64Url encoding of the UTF8 bytes.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.Util.Base64UrlHelpers.Encode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64-url digits. Parameters specify
            the subset as an offset in the input array, and the number of elements in the array to convert.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <param name="offset">The number of elements of inArray to convert.</param>
            <param name="length">An offset in inArray.</param>
            <returns>The string representation in base 64 url encoding of length elements of inArray, starting at position offset.</returns>
            <exception cref="T:System.ArgumentNullException">'inArray' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is negative OR offset plus length is greater than the length of inArray.</exception>
        </member>
        <member name="M:Microsoft.Identity.Web.Util.Base64UrlHelpers.Encode(System.Byte[])">
            <summary>
            Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64-url digits. Parameters specify
            the subset as an offset in the input array, and the number of elements in the array to convert.
            </summary>
            <param name="inArray">An array of 8-bit unsigned integers.</param>
            <returns>The string representation in base 64 url encoding of length elements of inArray, starting at position offset.</returns>
            <exception cref="T:System.ArgumentNullException">'inArray' is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or length is negative OR offset plus length is greater than the length of inArray.</exception>
        </member>
        <member name="M:Microsoft.Identity.Web.Util.Base64UrlHelpers.DecodeBytes(System.String)">
            <summary>
             Converts the specified string, which encodes binary data as base-64-url digits, to an equivalent 8-bit unsigned integer array.</summary>
            <param name="str">base64Url encoded string.</param>
            <returns>UTF8 bytes.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.Util.Base64UrlHelpers.Decode(System.String)">
            <summary>
            Decodes the string from Base64UrlEncoded to UTF8.
            </summary>
            <param name="arg">string to decode.</param>
            <returns>UTF8 string.</returns>
        </member>
        <member name="T:Microsoft.Identity.Web.ClaimConstants">
            <summary>
            Constants for claim types.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.Name">
            <summary>
            Name claim: "name".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.ObjectId">
            <summary>
            Old Object Id claim: http://schemas.microsoft.com/identity/claims/objectidentifier.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.Oid">
            <summary>
            New Object id claim: "oid".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.PreferredUserName">
            <summary>
            PreferredUserName: "preferred_username".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.TenantId">
            <summary>
            Old TenantId claim: "http://schemas.microsoft.com/identity/claims/tenantid".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.Tid">
            <summary>
            New Tenant Id claim: "tid".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.ClientInfo">
            <summary>
            ClientInfo claim: "client_info".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.UniqueObjectIdentifier">
            <summary>
            UniqueObjectIdentifier: "uid".
            Home Object Id.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.UniqueTenantIdentifier">
            <summary>
            UniqueTenantIdentifier: "utid".
            Home Tenant Id.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.Scope">
            <summary>
            Older scope claim: "http://schemas.microsoft.com/identity/claims/scope".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.Scp">
            <summary>
            Newer scope claim: "scp".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.Roles">
            <summary>
            New Roles claim = "roles".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.Role">
            <summary>
            Old Role claim: "http://schemas.microsoft.com/ws/2008/06/identity/claims/role".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.Sub">
            <summary>
            Subject claim: "sub".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.Acr">
            <summary>
            Acr claim: "acr".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.UserFlow">
            <summary>
            UserFlow claim: "http://schemas.microsoft.com/claims/authnclassreference".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.Tfp">
            <summary>
            Tfp claim: "tfp".
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.ClaimConstants.NameIdentifierId">
            <summary>
            Name Identifier ID claim: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier".
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.ConfidentialClientApplicationBuilderExtension.Logger.NotUsingManagedIdentity(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Logger for handling information specific to ConfidentialClientApplicationBuilderExtension.
            </summary>
            <param name="logger">ILogger.</param>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Microsoft.Identity.Web.ConfidentialClientApplicationBuilderExtension.Logger.UsingManagedIdentity(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Logger for handling information specific to ConfidentialClientApplicationBuilderExtension.
            </summary>
            <param name="logger">ILogger.</param>
        </member>
        <member name="M:Microsoft.Identity.Web.ConfidentialClientApplicationBuilderExtension.Logger.UsingPodIdentityFile(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Logger for handling information specific to ConfidentialClientApplicationBuilderExtension.
            </summary>
            <param name="logger">ILogger.</param>
            <param name="signedAssertionFileDiskPath"></param>
        </member>
        <member name="M:Microsoft.Identity.Web.ConfidentialClientApplicationBuilderExtension.Logger.UsingSignedAssertionFromVault(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Logger for handling information specific to ConfidentialClientApplicationBuilderExtension.
            </summary>
            <param name="logger">ILogger.</param>
            <param name="signedAssertionUri"></param>
        </member>
        <member name="M:Microsoft.Identity.Web.ConfidentialClientApplicationBuilderExtension.Logger.UsingCertThumbprint(Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Logger for handling information specific to ConfidentialClientApplicationBuilderExtension.
            </summary>
            <param name="logger">ILogger.</param>
            <param name="certThumbprint"></param>
        </member>
        <member name="T:Microsoft.Identity.Web.Constants">
            <summary>
            General constants for Microsoft Identity Web.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.Constants.LoginHint">
            <summary>
            LoginHint.
            Represents the preferred_username claim in the ID token.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.Constants.DomainHint">
            <summary>
            DomainHint.
            Determined by the tenant Id.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.Constants.Claims">
            <summary>
            Claims.
            Determined from the signed-in user.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.Constants.Bearer">
            <summary>
            Bearer.
            Predominant type of access token used with OAuth 2.0.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.Constants.AzureAd">
            <summary>
            AzureAd.
            Configuration section name for AzureAd.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.Constants.AzureAdB2C">
            <summary>
            AzureAdB2C.
            Configuration section name for AzureAdB2C.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.Constants.Scope">
            <summary>
            Scope.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.Constants.Policy">
            <summary>
            Policy for B2C user flows.
            The name of the policy to check against a specific user flow.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.Constants.SpaAuthCode">
            <summary>
            SpaAuthCode.
            Key to retreive SpaAuthCode from the HttpContext.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.Constants.ResetPasswordPath">
            <summary>
            Defaults which is the value used by Microsoft.Identity.Web.UI.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.Constants.ErrorPath">
            <summary>
            Defaults to the value used by Microsoft.Identity.Web.UI.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.Constants.ReturnUrl">
            <summary>
            Used to convey the original location of the user before
            the remote challenge was triggered up to the access denied page.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.DefaultAuthorizationHeaderProvider.CreateAuthorizationHeaderForUserAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Abstractions.AuthorizationHeaderProviderOptions,System.Security.Claims.ClaimsPrincipal,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Identity.Web.DefaultAuthorizationHeaderProvider.CreateAuthorizationHeaderForAppAsync(System.String,Microsoft.Identity.Abstractions.AuthorizationHeaderProviderOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Identity.Web.IDWebErrorMessage">
            <summary>
            Constants related to the error messages.
            </summary>
        </member>
        <member name="T:Microsoft.Identity.Web.ITokenAcquisition">
            <summary>
            Interface for the token acquisition service (encapsulating MSAL.NET).
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Typically used from an ASP.NET Core web app or web API controller. This method gets an access token
            for a downstream API on behalf of the user account for which the claims are provided in the <see cref="P:Microsoft.AspNetCore.Http.HttpContext.User"/>
            member of the controller's <see cref="T:Microsoft.AspNetCore.Http.HttpContext"/> parameter.
            </summary>
            <param name="scopes">Scopes to request for the downstream API to call.</param>
            <param name="tenantId">Enables to override the tenant/account for the same identity. This is useful in the
            cases where a given account is guest in other tenants, and you want to acquire tokens for a specific tenant.</param>
            <param name="userFlow">Azure AD B2C UserFlow to target.</param>
            <param name="user">Optional claims principal representing the user. If not provided, will use the signed-in
            user (in a web app), or the user for which the token was received (in a web API)
            cases where a given account is guest in other tenants, and you want to acquire tokens for a specific tenant, like where the user is a guest in.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
            <returns>An access token to call on behalf of the user, the downstream API characterized by its scopes.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Typically used from an ASP.NET Core web app or web API controller. This method gets an access token
            for a downstream API on behalf of the user account for which the claims are provided in the current user
            </summary>
            <param name="scopes">Scopes to request for the downstream API to call.</param>
            <param name="authenticationScheme">Authentication scheme. If null, will use OpenIdConnectDefault.AuthenticationScheme
            if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web API.</param>
            <param name="tenantId">Enables to override the tenant/account for the same identity. This is useful in the
            cases where a given account is guest in other tenants, and you want to acquire tokens for a specific tenant.</param>
            <param name="userFlow">Azure AD B2C UserFlow to target.</param>
            <param name="user">Optional claims principal representing the user. If not provided, will use the signed-in
            user (in a web app), or the user for which the token was received (in a web API)
            cases where a given account is guest in other tenants, and you want to acquire tokens for a specific tenant, like where the user is a guest in.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
            <returns>An access token to call on behalf of the user, the downstream API characterized by its scopes.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForUserAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Typically used from an ASP.NET Core web app or web API controller. This method gets an access token
            for a downstream API on behalf of the user account for which the claims are provided in the current user
            </summary>
            <param name="scopes">Scopes to request for the downstream API to call.</param>
            <param name="tenantId">Enables to override the tenant/account for the same identity. This is useful in the
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant.</param>
            <param name="userFlow">Azure AD B2C UserFlow to target.</param>
            <param name="user">Optional claims principal representing the user. If not provided, will use the signed-in
            user (in a web app), or the user for which the token was received (in a web API)
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant, like where the user is a guest in.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
            <returns>An <see cref="T:Microsoft.Identity.Client.AuthenticationResult"/> to call on behalf of the user, the downstream API characterized by its scopes.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForUserAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Typically used from an ASP.NET Core web app or web API controller. This method gets an access token
            for a downstream API on behalf of the user account for which the claims are provided in the current user
            </summary>
            <param name="scopes">Scopes to request for the downstream API to call.</param>
            <param name="authenticationScheme">Authentication scheme. If null, will use OpenIdConnectDefault.AuthenticationScheme
            if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web APIs.</param>
            <param name="tenantId">Enables to override the tenant/account for the same identity. This is useful in the
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant.</param>
            <param name="userFlow">Azure AD B2C UserFlow to target.</param>
            <param name="user">Optional claims principal representing the user. If not provided, will use the signed-in
            user (in a web app), or the user for which the token was received (in a web API)
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant, like where the user is a guest in.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
            <returns>An <see cref="T:Microsoft.Identity.Client.AuthenticationResult"/> to call on behalf of the user, the downstream API characterized by its scopes.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisition.GetAccessTokenForAppAsync(System.String,System.String,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Acquires a token from the authority configured in the app, for the confidential client itself (not on behalf of a user)
            using the client credentials flow. See https://aka.ms/msal-net-client-credentials.
            </summary>
            <param name="scope">The scope requested to access a protected API. For this flow (client credentials), the scope
            should be of the form "{ResourceIdUri/.default}" for instance <c>https://management.azure.net/.default</c> or, for Microsoft
            Graph, <c>https://graph.microsoft.com/.default</c> as the requested scopes are defined statically with the application registration
            in the portal, cannot be overridden in the application, as you can request a token for only one resource at a time (use
            several calls to get tokens for other resources).</param>
            <param name="tenant">Enables overriding of the tenant/account for the same identity. This is useful in the
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
            <returns>An access token for the app itself, based on its scopes.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisition.GetAccessTokenForAppAsync(System.String,System.String,System.String,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Acquires a token from the authority configured in the app, for the confidential client itself (not on behalf of a user)
            using the client credentials flow. See https://aka.ms/msal-net-client-credentials.
            </summary>
            <param name="scope">The scope requested to access a protected API. For this flow (client credentials), the scope
            should be of the form "{ResourceIdUri/.default}" for instance <c>https://management.azure.net/.default</c> or, for Microsoft
            Graph, <c>https://graph.microsoft.com/.default</c> as the requested scopes are defined statically with the application registration
            in the portal, cannot be overridden in the application, as you can request a token for only one resource at a time (use
            several calls to get tokens for other resources).</param>
            <param name="authenticationScheme">Authentication scheme. If null, will use OpenIdConnectDefault.AuthenticationScheme
            if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web API.</param>
            <param name="tenant">Enables overriding of the tenant/account for the same identity. This is useful in the
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
            <returns>An access token for the app itself, based on its scopes.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForAppAsync(System.String,System.String,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Acquires an authentication result from the authority configured in the app, for the confidential client itself (not on behalf of a user)
            using the client credentials flow. See https://aka.ms/msal-net-client-credentials.
            </summary>
            <param name="scope">The scope requested to access a protected API. For this flow (client credentials), the scope
            should be of the form "{ResourceIdUri/.default}" for instance <c>https://management.azure.net/.default</c> or, for Microsoft
            Graph, <c>https://graph.microsoft.com/.default</c> as the requested scopes are defined statically with the application registration
            in the portal, and cannot be overridden in the application, as you can request a token for only one resource at a time (use
            several calls to get tokens for other resources).</param>
            <param name="tenant">Enables overriding of the tenant/account for the same identity. This is useful
            for multi tenant apps or daemons.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
            <returns>An authentication result for the app itself, based on its scopes.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisition.GetAuthenticationResultForAppAsync(System.String,System.String,System.String,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Acquires an authentication result from the authority configured in the app, for the confidential client itself (not on behalf of a user)
            using the client credentials flow. See https://aka.ms/msal-net-client-credentials.
            </summary>
            <param name="scope">The scope requested to access a protected API. For this flow (client credentials), the scope
            should be of the form "{ResourceIdUri/.default}" for instance <c>https://management.azure.net/.default</c> or, for Microsoft
            Graph, <c>https://graph.microsoft.com/.default</c> as the requested scopes are defined statically with the application registration
            in the portal, and cannot be overridden in the application, as you can request a token for only one resource at a time (use
            several calls to get tokens for other resources).</param>
            <param name="authenticationScheme">Authentication scheme. If null, will use OpenIdConnectDefault.AuthenticationScheme
            if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web API.</param>
            <param name="tenant">Enables overriding of the tenant/account for the same identity. This is useful
            for multi tenant apps or daemons.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
            <returns>An authentication result for the app itself, based on its scopes.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisition.ReplyForbiddenWithWwwAuthenticateHeader(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.MsalUiRequiredException,Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Used in web APIs (which therefore cannot have an interaction with the user).
            Replies to the client through the HttpResponse by sending a 403 (forbidden) and populating wwwAuthenticateHeaders so that
            the client can trigger an interaction with the user so the user can consent to more scopes.
            </summary>
            <param name="scopes">Scopes to consent to.</param>
            <param name="msalServiceException"><see cref="T:Microsoft.Identity.Client.MsalUiRequiredException"/> triggering the challenge.</param>
            <param name="httpResponse">The <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/> to update.</param>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisition.ReplyForbiddenWithWwwAuthenticateHeader(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.MsalUiRequiredException,System.String,Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Used in web APIs (which therefore cannot have an interaction with the user).
            Replies to the client through the HttpResponse by sending a 403 (forbidden) and populating wwwAuthenticateHeaders so that
            the client can trigger an interaction with the user so the user can consent to more scopes.
            </summary>
            <param name="scopes">Scopes to consent to.</param>
            <param name="msalServiceException"><see cref="T:Microsoft.Identity.Client.MsalUiRequiredException"/> triggering the challenge.</param>
            <param name="authenticationScheme">Authentication scheme. If null, will use OpenIdConnectDefault.AuthenticationScheme
            if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web API.</param>
            <param name="httpResponse">The <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/> to update.</param>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisition.GetEffectiveAuthenticationScheme(System.String)">
            <summary>
            Get the effective authentication scheme based on the context.
            </summary>
            <param name="authenticationScheme">Proposed authentication scheme.</param>
            <returns>Effective authenticationScheme which is the authentication scheme
            if it's not null, or otherwise OpenIdConnectDefault.AuthenticationScheme
            if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web API.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisition.ReplyForbiddenWithWwwAuthenticateHeaderAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.Identity.Client.MsalUiRequiredException,Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
            Used in web APIs (which therefore cannot have an interaction with the user).
            Replies to the client through the HttpResponse by sending a 403 (forbidden) and populating wwwAuthenticateHeaders so that
            the client can trigger an interaction with the user so the user can consent to more scopes.
            </summary>
            <param name="scopes">Scopes to consent to.</param>
            <param name="msalServiceException"><see cref="T:Microsoft.Identity.Client.MsalUiRequiredException"/> triggering the challenge.</param>
            <param name="httpResponse">The <see cref="T:Microsoft.AspNetCore.Http.HttpResponse"/> to update.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.Identity.Web.ITokenAcquisitionInternal">
            <summary>
            Interface for the internal operations of token acquisition service (encapsulating MSAL.NET).
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisitionInternal.AddAccountToCacheFromAuthorizationCodeAsync(Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext,System.Collections.Generic.IEnumerable{System.String},System.String)">
             <summary>
             In a web app, adds, to the MSAL.NET cache, the account of the user authenticating to the web app, when the authorization code is received (after the user
             signed-in and consented)
             An On-behalf-of token contained in the <see cref="T:Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext"/> is added to the cache, so that it can then be used to acquire another token on-behalf-of the
             same user in order to call to downstream APIs.
             </summary>
             <param name="context">The context used when an 'AuthorizationCode' is received over the OpenIdConnect protocol.</param>
             <param name="scopes">Scopes to request.</param>
             <param name="authenticationScheme">Authentication scheme to use.</param>
             <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents a completed add to cache operation.</returns>
             <example>
             From the configuration of the Authentication of the ASP.NET Core web API:
             <code>OpenIdConnectOptions options;</code>
            
             Subscribe to the authorization code received event:
             <code>
              options.Events = new OpenIdConnectEvents();
              options.Events.OnAuthorizationCodeReceived = OnAuthorizationCodeReceived;
             }
             </code>
            
             And then in the OnAuthorizationCodeRecieved method, call <see cref="M:Microsoft.Identity.Web.ITokenAcquisitionInternal.AddAccountToCacheFromAuthorizationCodeAsync(Microsoft.AspNetCore.Authentication.OpenIdConnect.AuthorizationCodeReceivedContext,System.Collections.Generic.IEnumerable{System.String},System.String)"/>:
             <code>
             private async Task OnAuthorizationCodeReceived(AuthorizationCodeReceivedContext context)
             {
               var tokenAcquisition = context.HttpContext.RequestServices.GetRequiredService&lt;ITokenAcquisition&gt;();
                await _tokenAcquisition.AddAccountToCacheFromAuthorizationCode(context, new string[] { "user.read" });
             }
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Identity.Web.ITokenAcquisitionInternal.RemoveAccountAsync(System.Security.Claims.ClaimsPrincipal,System.String)">
            <summary>
            Removes the account associated with context.HttpContext.User from the MSAL.NET cache.
            </summary>
            <param name="user">Signed in user</param>
            <param name="authenticationScheme">Authentication scheme. If null, will use OpenIdConnectDefault.AuthenticationScheme
            if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web APIs.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents a completed remove from cache operation.</returns>
        </member>
        <member name="T:Microsoft.Identity.Web.LoggingEventId">
            <summary>
            EventIds for Logging.
            </summary>
        </member>
        <member name="T:Microsoft.Identity.Web.LoggingOptions">
            <summary>
            LoggingOptions class for passing in Identity specific logging options.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.LoggingOptions.EnablePiiLogging">
            <summary>
            Enable Pii Logging from configuration.
            Default is false.
            </summary>
        </member>
        <member name="T:Microsoft.Identity.Web.LogMessages">
            <summary>
            Constants related to the log messages.
            </summary>
        </member>
        <member name="T:Microsoft.Identity.Web.MergedOptions">
            <summary>
            Options for configuring authentication using Azure Active Directory. It has both AAD and B2C configuration attributes.
            Merges the MicrosoftIdentityWebOptions and the ConfidentialClientApplicationOptions.
            </summary>
        </member>
        <member name="T:Microsoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder">
            <summary>
            Base class for web app and web API Microsoft Identity authentication
            builders.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfigurationSection)">
            <summary>
            Constructor.
            </summary>
            <param name="services">The services being configured.</param>
            <param name="configurationSection">Optional configuration section.</param>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.Services">
            <summary>
            The services being configured.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityBaseAuthenticationBuilder.ConfigurationSection">
            <summary>
            Configuration section from which to bind options.
            </summary>
            <remarks>It can be null if the configuration happens with delegates
            rather than configuration.</remarks>
        </member>
        <member name="T:Microsoft.Identity.Web.MicrosoftIdentityOptions">
            <summary>
            Options for configuring authentication using Azure Active Directory. It has both AAD and B2C configuration attributes.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.Instance">
            <summary>
            Gets or sets the Azure Active Directory instance, e.g. "https://login.microsoftonline.com".
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.TenantId">
            <summary>
            Gets or sets the tenant ID.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.Domain">
            <summary>
            Gets or sets the domain of the Azure Active Directory tenant, e.g. contoso.onmicrosoft.com.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.EditProfilePolicyId">
            <summary>
            Gets or sets the edit profile user flow name for B2C, e.g. b2c_1_edit_profile.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.SignUpSignInPolicyId">
            <summary>
            Gets or sets the sign up or sign in user flow name for B2C, e.g. b2c_1_susi.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPolicyId">
            <summary>
            Gets or sets the reset password user flow name for B2C, e.g. B2C_1_password_reset.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.DefaultUserFlow">
            <summary>
            Gets the default user flow (which is signUpsignIn).
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.LegacyCacheCompatibilityEnabled">
            <summary>
            Enables legacy ADAL cache serialization and deserialization.
            Performance improvements when working with MSAL only apps.
            Set to true if you have a shared cache with ADAL apps.
            </summary>
            The default is <c>false.</c>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.IsB2C">
            <summary>
            Is considered B2C if the attribute SignUpSignInPolicyId is defined.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.HasClientCredentials">
            <summary>
            Is considered to have client credentials if the attribute ClientCertificates
            or ClientSecret is defined.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.ClientCertificates">
            <summary>
            Description of the certificates used to prove the identity of the web app or web API.
            </summary>
            <example> An example in the appsetting.json:
            <code>
            "ClientCertificates": [
              {
                "SourceType": "StoreWithDistinguishedName",
                 "CertificateStorePath": "CurrentUser/My",
                 "CertificateDistinguishedName": "CN=WebAppCallingWebApiCert"
                }
               ]
              </code>
              See also https://aka.ms/ms-id-web-certificates.
              </example>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.TokenDecryptionCertificates">
            <summary>
            Description of the certificates used to decrypt an encrypted token in a web API.
            </summary>
            <example> An example in the appsetting.json:
            <code>
            "TokenDecryptionCertificates": [
              {
                "SourceType": "StoreWithDistinguishedName",
                 "CertificateStorePath": "CurrentUser/My",
                 "CertificateDistinguishedName": "CN=WebAppCallingWebApiCert"
                }
               ]
              </code>
              See also https://aka.ms/ms-id-web-certificates.
              </example>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentials">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.TokenDecryptionCredentials">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.SendX5C">
            <summary>
            Specifies if the x5c claim (public key of the certificate) should be sent to the STS.
            Sending the x5c enables application developers to achieve easy certificate rollover in Azure AD:
            this method will send the public certificate to Azure AD along with the token request,
            so that Azure AD can use it to validate the subject name based on a trusted issuer policy.
            This saves the application admin from the need to explicitly manage the certificate rollover
            (either via portal or PowerShell/CLI operation). For details see https://aka.ms/msal-net-sni.
            </summary>
            The default is <c>false.</c>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.WithSpaAuthCode">
            <summary>
            Requests an auth code for the frontend (SPA using MSAL.js for instance). 
            See https://aka.ms/msal-net/spa-auth-code for details.
            </summary>
            The default is <c>false.</c>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.AllowWebApiToBeAuthorizedByACL">
            <summary>
            Daemon applications can validate a token based on roles, or using the ACL-based authorization
            pattern to control tokens without a roles claim. If using ACL-based authorization,
            Microsoft Identity Web will not throw if roles or scopes are not in the Claims.
            For details see https://aka.ms/ms-identity-web/daemon-ACL.
            </summary>
            The default is <c>false.</c>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.UserAssignedManagedIdentityClientId">
            <summary>
            Used, when deployed to Azure, to specify explicitly a user assigned managed identity.
            See https://docs.microsoft.com/azure/active-directory/managed-identities-azure-resources/how-to-manage-ua-identity-portal.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.ClientCredentialsUsingManagedIdentity">
            <summary>
            Options for configuring certificateless
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.ResetPasswordPath">
            <summary>
            Sets the ResetPassword route path.
            Defaults to /MicrosoftIdentity/Account/ResetPassword,
            which is the value used by Microsoft.Identity.Web.UI.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityOptions.ErrorPath">
            <summary>
            Sets the Error route path.
            Defaults to the value /MicrosoftIdentity/Account/Error,
            which is the value used by Microsoft.Identity.Web.UI.
            </summary>
        </member>
        <member name="T:Microsoft.Identity.Web.MicrosoftIdentityWebChallengeUserException">
            <summary>
             Microsoft Identity Web specific exception class for
             use in Blazor or Razor pages to process the user challenge.
             Handles the <see cref="P:Microsoft.Identity.Web.MicrosoftIdentityWebChallengeUserException.MsalUiRequiredException"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityWebChallengeUserException.MsalUiRequiredException">
            <summary>
            Exception thrown by MSAL when a user challenge is encountered.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityWebChallengeUserException.Scopes">
            <summary>
            Scopes to request.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.MicrosoftIdentityWebChallengeUserException.Userflow">
            <summary>
            Specified userflow.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.MicrosoftIdentityWebChallengeUserException.#ctor(Microsoft.Identity.Client.MsalUiRequiredException,System.String[],System.String)">
            <summary>
            Handles the user challenge for Blazor or Razor pages.
            </summary>
            <param name="msalUiRequiredException">Exception thrown by MSAL when a user challenge is encountered.</param>
            <param name="scopes">Scopes to request.</param>
            <param name="userflow">Userflow used in B2C.</param>
        </member>
        <member name="T:Microsoft.Identity.Web.ServiceCollectionExtensions">
            <summary>
            Extensions for IServiceCollection for startup initialization of web APIs.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.ServiceCollectionExtensions.AddTokenAcquisition(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
             <summary>
             Add the token acquisition service.
             </summary>
             <param name="services">Service collection.</param>
             <param name="isTokenAcquisitionSingleton">Specifies if an instance of <see cref="T:Microsoft.Identity.Web.ITokenAcquisition"/> should be a singleton.</param>
             <returns>The service collection.</returns>
             <example>
             This method is typically called from the <c>ConfigureServices(IServiceCollection services)</c> in Startup.cs.
             Note that the implementation of the token cache can be chosen separately.
            
             <code>
             // Token acquisition service and its cache implementation as a session cache
             services.AddTokenAcquisition()
             .AddDistributedMemoryCache()
             .AddSession()
             .AddSessionBasedTokenCache();
             </code>
             </example>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory_GetTokenAcquirers.GetTokenAcquirer(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Identity.Abstractions.CredentialDescription},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory_GetTokenAcquirers.GetTokenAcquirer(Microsoft.Identity.Abstractions.IdentityApplicationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory_GetTokenAcquirers.GetTokenAcquirer(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Identity.Web.TokenAcquirerFactory">
            <summary>
            Factory of a token acquirer.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.TokenAcquirerFactory.Configuration">
            <summary>
            Configuration. By default the configuration contains the content of the 
            appsettings.json file, provided this file is copied in the folder of the app.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.TokenAcquirerFactory.ServiceProvider">
            <summary>
            Service Provider. The service provider is only available once the factory was built
            using <see cref="M:Microsoft.Identity.Web.TokenAcquirerFactory.Build"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.TokenAcquirerFactory.Services">
            <summary>
            Services. Used in the initialization phase
            </summary>
            <exception cref="T:System.InvalidOperationException"/> will be thrown if you try to access
            Services after you called <see cref="M:Microsoft.Identity.Web.TokenAcquirerFactory.Build"/>.
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory.GetDefaultInstance``1(System.String)">
            <summary>
            Get the default instance of a token acquirer factory. Use this method, for instance, if you have an ASP.NET OWIN application
            and you want to get the default instance of the OwinTokenAcquirerFactory.
            </summary>
            /// <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[ConvertType](~/../tests/DevApps/aspnet-mvc/OwinWebApp/App_Start/Startup.Auth.cs?highlight=22)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory.GetDefaultInstance(System.String)">
            <summary>
            Get the default instance. Use this method to retrieve the instance, optionally add some services to 
            the service collection, and build the instance.
            </summary>
            <returns></returns>
            <example>
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[ConvertType](~/../tests/DevApps/daemon-app/daemon-console-calling-msgraph/Program.cs?highlight=5)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory.Build">
            <summary>
            Build the Token acquirer. This does the composition of all the services you have added to
            <see cref="P:Microsoft.Identity.Web.TokenAcquirerFactory.Services"/>, and returns a service provider, which you can then use to get access
            to the services you have added.
            </summary>
            <returns></returns>
            <example>
            The following example shows how you add Microsoft GraphServiceClient to the services
            and use it after you've built the token acquirer factory. The authentication is handled
            transparently based on the information in the appsettings.json.
            <format type="text/markdown">
            <![CDATA[
             [!code-csharp[ConvertType](~/../tests/DevApps/daemon-app/daemon-console-calling-msgraph/Program.cs?highlight=7)]
            ]]></format>
            </example>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory.PreBuild">
            <summary>
            Additional processing before the Build (adds an in-memory token cache if no cache was added)
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.TokenAcquirerFactory.defaultInstance">
            <summary>
            Default instance
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory.ResetDefaultInstance">
            <summary>
            Resets the default instance. Useful for tests as token acquirer factory is a singleton
            in most configurations (except ASP.NET Core)
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory.DefineConfiguration(Microsoft.Extensions.Configuration.IConfigurationBuilder)">
            <summary>
            Adding additional configuration and returns the base path for configuration
            files
            </summary>
            <param name="builder"></param>
            <returns>Returns the base path for configuration files</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory.GetTokenAcquirer(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.Identity.Abstractions.CredentialDescription},System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory.GetTokenAcquirer(Microsoft.Identity.Abstractions.IdentityApplicationOptions)">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquirerFactory.GetTokenAcquirer(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Microsoft.Identity.Web.TokenAcquisition">
            <summary>
            Token acquisition service.
            </summary>
            <summary>
            LoggingMessage class for TokenAcquisition.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.TokenAcquisition._applicationsByAuthorityClientId">
            <summary>
             Please call GetOrBuildConfidentialClientApplication instead of accessing this field directly.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.TokenAcquisition._scopesRequestedByMsal">
            <summary>
            Scopes which are already requested by MSAL.NET. They should not be re-requested;.
            </summary>
        </member>
        <member name="F:Microsoft.Identity.Web.TokenAcquisition._metaTenantIdentifiers">
            <summary>
            Meta-tenant identifiers which are not allowed in client credentials.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisition.#ctor(Microsoft.Identity.Web.TokenCacheProviders.IMsalTokenCacheProvider,Microsoft.Identity.Web.ITokenAcquisitionHost,System.Net.Http.IHttpClientFactory,Microsoft.Extensions.Logging.ILogger{Microsoft.Identity.Web.TokenAcquisition},System.IServiceProvider,Microsoft.Identity.Abstractions.ICredentialsLoader)">
            <summary>
            Constructor of the TokenAcquisition service. This requires the Azure AD Options to
            configure the confidential client application and a token cache provider.
            This constructor is called by ASP.NET Core dependency injection.
            </summary>
            <param name="tokenCacheProvider">The App token cache provider.</param>
            <param name="tokenAcquisitionHost">Host of the token acquisition.</param>
            <param name="httpClientFactory">HTTP client factory.</param>
            <param name="logger">Logger.</param>
            <param name="serviceProvider">Service provider.</param>
            <param name="credentialsLoader">Credential loader used to provide the credentials.</param>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisition.GetAuthenticationResultForUserAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Typically used from a web app or web API controller, this method retrieves an access token
            for a downstream API using;
            1) the token cache (for web apps and web APIs) if a token exists in the cache
            2) or the <a href='https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow'>on-behalf-of flow</a>
            in web APIs, for the user account that is ascertained from claims provided in the current claims principal.
            instance of the current HttpContext.
            </summary>
            <param name="scopes">Scopes to request for the downstream API to call.</param>
            <param name="authenticationScheme">Authentication scheme. If null, will use OpenIdConnectDefault.AuthenticationScheme
            if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web APIs.</param>
            <param name="tenantId">Enables overriding of the tenant/account for the same identity. This is useful in the
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant, like where the user is a guest.</param>
            <param name="userFlow">Azure AD B2C user flow to target.</param>
            <param name="user">Optional claims principal representing the user. If not provided, will use the signed-in
            user (in a web app), or the user for which the token was received (in a web API)
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant, like where the user is a guest.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition options object which calls into MSAL .NET.</param>
            <returns>An access token to call the downstream API and populated with this downstream API's scopes.</returns>
            <remarks>Calling this method from a web API supposes that you have previously called,
            in a method called by JwtBearerOptions.Events.OnTokenValidated, the HttpContextExtensions.StoreTokenUsedToCallWebAPI method
            passing the validated token (as a JwtSecurityToken). Calling it from a web app supposes that
            you have previously called AddAccountToCacheFromAuthorizationCodeAsync from a method called by
            OpenIdConnectOptions.Events.OnAuthorizationCodeReceived.</remarks>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisition.GetAuthenticationResultForAppAsync(System.String,System.String,System.String,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Acquires an authentication result from the authority configured in the app, for the confidential client itself (not on behalf of a user)
            using the client credentials flow. See https://aka.ms/msal-net-client-credentials.
            </summary>
            <param name="scope">The scope requested to access a protected API. For this flow (client credentials), the scope
            should be of the form "{ResourceIdUri/.default}" for instance <c>https://management.azure.net/.default</c> or, for Microsoft
            Graph, <c>https://graph.microsoft.com/.default</c> as the requested scopes are defined statically with the application registration
            in the portal, and cannot be overridden in the application, as you can request a token for only one resource at a time (use
            several calls to get tokens for other resources).</param>
            <param name="authenticationScheme">AuthenticationScheme to use.</param>
            <param name="tenant">Enables overriding of the tenant/account for the same identity. This is useful
            for multi tenant apps or daemons.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
            <returns>An authentication result for the app itself, based on its scopes.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisition.GetAccessTokenForAppAsync(System.String,System.String,System.String,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Acquires a token from the authority configured in the app, for the confidential client itself (not on behalf of a user)
            using the client credentials flow. See https://aka.ms/msal-net-client-credentials.
            </summary>
            <param name="scope">The scope requested to access a protected API. For this flow (client credentials), the scope
            should be of the form "{ResourceIdUri/.default}" for instance <c>https://management.azure.net/.default</c> or, for Microsoft
            Graph, <c>https://graph.microsoft.com/.default</c> as the requested scopes are defined statically with the application registration
            in the portal, and cannot be overridden in the application, as you can request a token for only one resource at a time (use
            several calls to get tokens for other resources).</param>
            <param name="authenticationScheme">AuthenticationScheme to use.</param>
            <param name="tenant">Enables overriding of the tenant/account for the same identity. This is useful
            for multi tenant apps or daemons.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
            <returns>An access token for the app itself, based on its scopes.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisition.GetAccessTokenForUserAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String,System.Security.Claims.ClaimsPrincipal,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Typically used from a web app or web API controller, this method retrieves an access token
            for a downstream API using;
            1) the token cache (for web apps and web APIs) if a token exists in the cache
            2) or the <a href='https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow'>on-behalf-of flow</a>
            in web APIs, for the user account that is ascertained from the claims provided in the current claims principal.
            instance of the current HttpContext.
            </summary>
            <param name="scopes">Scopes to request for the downstream API to call.</param>
            <param name="authenticationScheme">Authentication scheme. If null, will use OpenIdConnectDefault.AuthenticationScheme
            if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web API.</param>
            <param name="tenantId">Enables overriding of the tenant/account for the same identity. This is useful in the
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant.</param>
            <param name="userFlow">Azure AD B2C user flow to target.</param>
            <param name="user">Optional claims principal representing the user. If not provided, will use the signed-in
            user (in a web app), or the user for which the token was received (in a web API)
            cases where a given account is a guest in other tenants, and you want to acquire tokens for a specific tenant.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
            <returns>An access token to call the downstream API and populated with this downstream API's scopes.</returns>
            <remarks>Calling this method from a web API supposes that you have previously called,
            in a method called by JwtBearerOptions.Events.OnTokenValidated, the HttpContextExtensions.StoreTokenUsedToCallWebAPI method
            passing the validated token (as a JwtSecurityToken). Calling it from a web app supposes that
            you have previously called AddAccountToCacheFromAuthorizationCodeAsync from a method called by
            OpenIdConnectOptions.Events.OnAuthorizationCodeReceived.</remarks>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisition.RemoveAccountAsync(System.Security.Claims.ClaimsPrincipal,System.String)">
            <summary>
            Removes the account associated with context.HttpContext.User from the MSAL.NET cache.
            </summary>
            <param name="user">User</param>
            <param name="authenticationScheme">Authentication scheme. If null, will use OpenIdConnectDefault.AuthenticationScheme
            if called from a web app, and JwtBearerDefault.AuthenticationScheme if called from a web API.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents a completed account removal operation.</returns>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisition.BuildConfidentialClientApplication(Microsoft.Identity.Web.MergedOptions)">
            <summary>
            Creates an MSAL confidential client application.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisition.GetAuthenticationResultForWebAppWithAccountFromCacheAsync(Microsoft.Identity.Client.IConfidentialClientApplication,System.Security.Claims.ClaimsPrincipal,System.Collections.Generic.IEnumerable{System.String},System.String,Microsoft.Identity.Web.MergedOptions,System.String,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Gets an access token for a downstream API on behalf of the user described by its claimsPrincipal.
            </summary>
            <param name="application"><see cref="T:Microsoft.Identity.Client.IConfidentialClientApplication"/>.</param>
            <param name="claimsPrincipal">Claims principal for the user on behalf of whom to get a token.</param>
            <param name="scopes">Scopes for the downstream API to call.</param>
            <param name="tenantId">(optional) TenantID based on a specific tenant for which to acquire a token to access the scopes
            on behalf of the user described in the claimsPrincipal.</param>
            <param name="mergedOptions">Merged options.</param>
            <param name="userFlow">Azure AD B2C user flow to target.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisition.GetAuthenticationResultForWebAppWithAccountFromCacheAsync(Microsoft.Identity.Client.IConfidentialClientApplication,Microsoft.Identity.Client.IAccount,System.Collections.Generic.IEnumerable{System.String},System.String,Microsoft.Identity.Web.MergedOptions,System.String,Microsoft.Identity.Web.TokenAcquisitionOptions)">
            <summary>
            Gets an access token for a downstream API on behalf of the user whose account is passed as an argument.
            </summary>
            <param name="application"><see cref="T:Microsoft.Identity.Client.IConfidentialClientApplication"/>.</param>
            <param name="account">User IAccount for which to acquire a token.
            See <see cref="P:Microsoft.Identity.Client.AccountId.Identifier"/>.</param>
            <param name="scopes">Scopes for the downstream API to call.</param>
            <param name="tenantId">TenantID based on a specific tenant for which to acquire a token to access the scopes
            on behalf of the user.</param>
            <param name="mergedOptions">Merged options.</param>
            <param name="userFlow">Azure AD B2C user flow.</param>
            <param name="tokenAcquisitionOptions">Options passed-in to create the token acquisition object which calls into MSAL .NET.</param>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisition.Logger.TokenAcquisitionError(Microsoft.Extensions.Logging.ILogger,System.String,System.Exception)">
            <summary>
            Logger for handling MSAL exceptions in TokenAcquisition.
            </summary>
            <param name="logger">ILogger.</param>
            <param name="msalErrorMessage">Specific log message from TokenAcquisition.</param>
            <param name="ex">Exception from MSAL.NET.</param>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisition.Logger.TokenAcquisitionMsalAuthenticationResultTime(Microsoft.Extensions.Logging.ILogger,System.Int64,System.Int64,System.Int64,System.String,System.String,System.String,System.Exception)">
            <summary>
            Logger for handling information specific to MSAL in token acquisition.
            </summary>
            <param name="logger">ILogger.</param>
            <param name="durationTotalInMs">durationTotalInMs.</param>
            <param name="durationInHttpInMs">durationInHttpInMs.</param>
            <param name="durationInCacheInMs">durationInCacheInMs.</param>
            <param name="tokenSource">cache or IDP.</param>
            <param name="correlationId">correlationId.</param>
            <param name="cacheRefreshReason">cacheRefreshReason.</param>
            <param name="ex">Exception from MSAL.NET.</param>
        </member>
        <member name="T:Microsoft.Identity.Web.TokenAcquisitionOptions">
            <summary>
            Options passed-in to create the token acquisition object which calls into MSAL .NET.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.TokenAcquisitionOptions.PoPConfiguration">
            <summary>
            Modifies the token acquisition request so that the acquired token is a Proof of Possession token (PoP),
            rather than a Bearer token.
            PoP tokens are similar to Bearer tokens, but are bound to the HTTP request and to a cryptographic key,
            which MSAL can manage. See https://aka.ms/msal-net-pop.
            </summary>
        </member>
        <member name="P:Microsoft.Identity.Web.TokenAcquisitionOptions.CancellationToken">
            <summary>
            Cancellation token to be used when calling the token acquisition methods.
            </summary>
        </member>
        <member name="M:Microsoft.Identity.Web.TokenAcquisitionOptions.Clone">
            <summary>
            Clone the options (to be able to override them).
            </summary>
            <returns>A clone of the options.</returns>
        </member>
    </members>
</doc>
